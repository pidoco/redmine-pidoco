
<%# jsh: WE NEED TO DISCUSS THIS :) ARE YOU MONKEYPATCHING REDMINE's JS HERE? THIS IS LIKELY TO BREAK IN FUTURE REDMINE VERSIONS... %>
<%# jsh: btw. wouldn't this be a great case for a pidocobar.js.erb ?? %>
<%# mk: This basically uses the interface of Redmine's jstoolbar.js. I would think that's just fine. (The alternative would be to 
        implement our own version of a toolbar which is not really better imho. The part that really hurts (and should be changed) is 
        in PidocoWikiFormattingHelperPatch where this this piece of js is monkey patched into the return value of wikitoolbar_for. %>

<% if @project && @project.module_enabled?(:pidoco) %>
	<% default_settings = Redmine::Plugin.find(:redmine_pidoco).settings[:default] 
		base_url = default_settings["SSL"] ? 
			"https://" + default_settings["HOST"] : 
			"http://" + default_settings["HOST"] + ":" + default_settings["PORT"].to_s
		base_url += default_settings["URI_PREFIX"]
	%>

  <script type="text/javascript">

  jsToolBar.prototype.elements.page_png = {
  	type: 'button',
  	title: "<%= l(:embed_page) %>",
  	fn: { wiki: function() {
  	          var prototypes = new Array();
  	          var prototype = {};
  	          var pages = {};
  						<% @project.prototypes.each do |prototype| %>
  						  prototype = { "id" : "<%= h prototype.api_id%>", "name" : "<%= h prototype.name%>", "key" : "<%= h prototype.pidoco_key.key%>" };
  						  pages = {};
  						  <% (prototype.page_names||{}).each_pair do |page_id, page_name| %>
  						    pages["<%= h page_id %>"] = "<%= h page_name %>";
  						  <% end %>
  					    prototype["pages"] = pages;
  				      prototypes.push(prototype);
  						<% end %>
  						try {
								<%# jsh: _ vs. - %>
            	    Element.remove('pidoco_select');
        	    } catch(e) {}
  						jsToolBar.prototype.elements.page_png.drawDropDown(prototypes);
          }
  	},
  	drawDropDown: function(prototypes) {
  	    try {
      	    Element.remove('pidoco-plugin-div');
  	    } catch(e) {}
  	    var result = "<select id ='pidoco-select' name='pageId' onchange='jsToolBar.prototype.elements.page_png.insertPngLink( " +
  	                    "this.options[this.selectedIndex].value, " +
          	            "this.options[this.selectedIndex].parentNode.getAttribute(\"apikey\"))'>" +
                        "<option value='0'><%= l :choose_a_page %></option>";
  	    var t1 = new Template('<optgroup apikey="#{key}" style="font-weight:bold;" label="#{prototype}">');
  	    var t2 = new Template('<option value="#{prototype_id}/pages/#{id}">::#{name}</option>');
  	    for(var i=0; i < prototypes.length; i++) {
  	        ptype = prototypes[i];
  	        if(typeof(prototype) !== 'function') {
  	            try {
      	            result += t1.evaluate({prototype: ptype["name"], key: ptype["key"]});
      	        } catch(e) {console.log(e)}
      	        for (var pageId in ptype.pages) {
          	        try {
                          result += t2.evaluate({prototype_id: ptype["id"], id: pageId, name: ptype.pages[pageId]});
      	            } catch(e) {}                
      	        }
      	        result += '</optgroup>'
              }
  	    }
  	    result += "</select>";
  	    Element.insert(document.getElementsByClassName("jstb_page_png")[0], {after: result});
  	},
  	insertPngLink: function(uri_part, key) {
  	    if(uri_part == null || uri_part == "") {
  	        return;
  	    }
  	    try {
      	    Element.remove('pidoco-select');
  	    } catch(e) {}
  	    var url = '<%= h base_url%>';
		// insert textile image that links to the sketched xhtml
		// variables should have been escaped before function call
  	    window.wikiToolbar.singleTag("!" + url + "prototypes/" + uri_part + ".png?api_key=" + key + "!:" + url + "prototypes/" + uri_part + ".xhtml?api_key=" + key + "&mode=sketched", " ");
  	}
	
  }
  </script>
<% end %>